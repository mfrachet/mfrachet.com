---
import { getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Text } from "../../components/Text";
import { GithubIssueLink } from "../../components/GithubIssueLink";
import { getAllPosts } from "../../modules/posts/services/getAllposts";
import {
  PreviousPostButton,
  NextPostButton,
} from "../../modules/posts/components/PostButton";
import Toc from "../../components/Toc.astro";
import { generateToC } from "../../utils/generateToc";
// 1. Get the slug from the incoming server request
const { slug } = Astro.params;
if (slug === undefined) {
  throw new Error("Slug is required");
}
// 2. Query for the entry directly using the request slug
const entry = await getEntry("blog", slug);
const entries = await getAllPosts();

const index = entries.findIndex((e) => e.slug === slug);
const prevPost = index > 0 ? entries.at(index - 1) : undefined;
const nextPost = entries.at(index + 1);

// 3. Redirect if the entry does not exist
if (entry === undefined) {
  return Astro.redirect("/404");
}
// 4. (Optional) Render the entry to HTML in the template
const { Content, headings } = await entry.render();

const cover = `/blog/${entry.slug}_cover.jpg`;
const formatter = new Intl.DateTimeFormat("en-US", { dateStyle: "long" });
const formattedDate = formatter.format(entry.data.date);

const toc = generateToC(headings, {
  minHeadingLevel: 2,
  maxHeadingLevel: 6,
  title: "Table of Contents",
});
---

<Layout title={entry.data.title} heroImage={cover}>
  <main
    class="px-4 mx-auto prose-pre:!leading-5 prose-code:text-sm prose-code:px-1 prose lg:prose-xl prose-invert md:prose-pre:-mx-10 prose-pre:rounded-xl prose-img:rounded-xl pb-12"
  >
    <Text as="time" className="!text-zinc-400 text-xl pt-4 block ">
      {formattedDate}
    </Text>

    <Text
      as="h1"
      className="text-3xl md:text-5xl pb-6 font-semibold text-balance"
    >
      {entry.data.title}
    </Text>

    <Toc title={entry.data.title} items={toc} />
    <Content />

    <GithubIssueLink
      title={`Suggestions for: ${entry.data.title}`}
      body={`Link of the article: https://mfrachet.com/blog/${slug}`}
    />

    <div class="flex flex-col md:flex-row gap-4 pt-2">
      {
        prevPost?.slug && (
          <PreviousPostButton href={`/blog/${prevPost.slug}`}>
            {prevPost.data.title}
          </PreviousPostButton>
        )
      }

      {
        nextPost?.slug && (
          <NextPostButton href={`/blog/${nextPost.slug}`}>
            {nextPost.data.title}
          </NextPostButton>
        )
      }
    </div>
  </main>
</Layout>
